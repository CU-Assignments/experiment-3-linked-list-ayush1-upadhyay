// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class RemoveDuplicatesFromSortedListII {
    public ListNode deleteDuplicates(ListNode head) {
        // Create a dummy node to handle edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        // Use two pointers: prev and current
        ListNode prev = dummy;
        ListNode current = head;

        while (current != null) {
            // If current node has duplicates
            if (current.next != null && current.val == current.next.val) {
                int duplicateValue = current.val;
                // Skip all nodes with the duplicate value
                while (current != null && current.val == duplicateValue) {
                    current = current.next;
                }
                // Update prev.next to skip duplicates
                prev.next = current;
            } else {
                // No duplicates, move prev forward
                prev = current;
                current = current.next;
            }
        }

        // Return the modified list
        return dummy.next;
    }

    // Helper method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        RemoveDuplicatesFromSortedListII solution = new RemoveDuplicatesFromSortedListII();

        // Example 1
        ListNode list1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(3, new ListNode(4, new ListNode(4, new ListNode(5)))))));
        ListNode result1 = solution.deleteDuplicates(list1);
        printList(result1); // Output: 1 -> 2 -> 5 -> null

        // Example 2
        ListNode list2 = new ListNode(1, new ListNode(1, new ListNode(1, new ListNode(2, new ListNode(3)))));
        ListNode result2 = solution.deleteDuplicates(list2);
        printList(result2); // Output: 2 -> 3 -> null
    }
}
